<?php

namespace Tests;

use PHPUnit\Framework\TestCase as PHPUnitTestCase;

use Database\Services\QueryBuilder\Builder;

use Database\Drivers\MySQL;
use Database\Drivers\SQLite;

class TestCase extends PHPUnitTestCase
{

    protected array $databaseDrivers = [
        MySQL::class => null,
        SQLite::class => null,
    ];

    public function __construct(?string $name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);

        $this->bootConfig();
        $this->runMigrations();
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seedTables();
    }

    protected function seedTables() {
        $this->iterateDrivers(function ($driver) {
            $driver->raw(file_get_contents(__DIR__ . '/stubs/seeds/users.sql'));
            $driver->raw(file_get_contents(__DIR__ . '/stubs/seeds/projects.sql'));
        });
    }

    /**
     * Set database driver configs
     */
    protected function bootConfig()
    {
        $config = require(__DIR__ . '/config/database.php');
        \Database\Drivers\DatabaseDriver::setConfig($config);
    }

    /**
     * Drop and recreates test tables
     */
    protected function runMigrations()
    {
        $this->iterateDrivers(function ($driver, $type) {
            $driver = new Builder(new $type);
            $parts = explode('\\', $type);
            $stubsFolder = strtolower(array_pop($parts));

            $driver->raw(file_get_contents(__DIR__ . '/stubs/migrations/' . $stubsFolder . '/users.sql'));
            $driver->raw(file_get_contents(__DIR__ . '/stubs/migrations/' . $stubsFolder . '/projects.sql'));
            $this->databaseDrivers[$type] = $driver;
        });
    }

    /**
     * Helper method for running assertions on all database drivers
     *
     * @param \Closure $closure
     */
    protected function iterateDrivers(\Closure $closure)
    {
        foreach ($this->databaseDrivers as $type => $driver) {
            $closure($driver, $type);
        }
    }

}

function dd(...$props)
{
    dump(...$props);
    exit();
}

function dump(...$props)
{
    foreach ($props as $prop) {
        print_r("\r\n");
        print_r($prop);
        print_r("\r\n");
    }
}